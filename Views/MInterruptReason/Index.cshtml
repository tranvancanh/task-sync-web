@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;
@using task_sync_web.Commons

@model MInterruptReasonViewModel
@{
    ViewData["Title"] = @Model.DisplayName;
    var pagedList = Model.InterruptReasonModels;
}

<style>
    .modal__container {
        max-width: 800px !important; /* モーダルの幅を設定  */
        width: 800px !important; /* モーダルの幅を設定  */
    }

    th {
        white-space: nowrap !important;
    }
</style>

<div class="h4 mb-3">
    @{
        ViewData["Title"] = @Model.DisplayName;
    }
</div>

@await Html.PartialAsync("~/Views/MInterruptReason/_Modal.cshtml")

<div class="card shadow m-4">
    <div class="card-header">
        <h3 class="pt-2">@Model.DisplayName</h3>
    </div>
    <div class="card-body">
        <div class="p-2">
            <form id="interrupt-reason-form" class="form-inline" asp-controller="MInterruptReason" enctype="multipart/form-data" method="get">
                <div class="row">
                    <div class="form-group col-auto p-2">
                        <button class="btn btn-custom btn-lg" id="btnNavbarSearch" type="button" role="button" onclick="SubmitForm('-99', '@Enums.ModalType.Create')">
                            <span class="p-2"><i class="fas fa-plus fa-fw"></i> 登録</span>
                        </button>
                    </div>
                    <div class="form-group col-auto p-2">
                        <div class="input-group">
                            <input class="form-control form-control-lg" asp-for="SearchKeyWord" type="text" placeholder="キーワードを入力" aria-describedby="btnNavbarSearch" />
                            <button class="btn btn-search btn-lg" asp-action="Index" id="btnNavbarSearch" type="submit"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                </div>
            </form>
            <div class="col-auto my-2">
                <span class="text-success-custom" id="MessageSuccess">@ViewData["SuccessMessage"]</span>
                <span class="text-danger-custom" id="MessageError">@ViewData["ErrorMessage"]</span>
            </div>
            @Html.HiddenFor(model => model.PageNumber)
            <div>
                <table class="table sticky_table table-hover-evant mt-3">
                    <thead>
                        <tr>
                            <th style="width: 15%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].InterruptReasonCode)</th>
                            <th style="width: 15%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].InterruptReasonName)</th>
                            <th style="width: 30%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].Remark)</th>
                            <th style="width: 10%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].IsNotUse)</th>
                            <th style="width: 10%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].CreateFor)</th>
                            <th style="width: 10%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].CreateDateTime)</th>
                            <th style="width: 10%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].UpdateFor)</th>
                            <th style="width: 10%">@Html.DisplayNameFor(model => model.InterruptReasonModels[0].UpdateDateTime)</th>
                        </tr>
                    </thead>

                    @if (Model != null && pagedList != null && pagedList.Count > 0)
                    {
                        <tbody>
                            @foreach (var item in pagedList)
                            {
                                <tr role="button" onclick="SubmitForm('@item.InterruptReasonId', '@Enums.ModalType.Edit')">
                                    <td class="text-right">@Html.DisplayFor(model => item.InterruptReasonCode)</td>
                                    <td class="text-left">@Html.DisplayFor(model => item.InterruptReasonName)</td>
                                    <td class="text-left">@Html.DisplayFor(model => item.Remark)</td>
                                    <td class="text-center">@((item.IsNotUse == false) ? 0 : 1)</td>
                                    <td class="text-left">@Html.DisplayFor(model => item.CreateFor)</td>
                                    <td class="text-left">@Html.DisplayFor(model => item.CreateDateTime)</td>
                                    <td class="text-left">@Html.DisplayFor(model => item.UpdateFor)</td>
                                    <td class="text-left">@Html.DisplayFor(model => item.UpdateDateTime)</td>
                                </tr>

                            }
                        </tbody>
                    }

                </table>
            </div>

            @if (pagedList != null)
            {
                <div class="mt-3">
                    <span class="page-no-label">
                        @pagedList.FirstItemOnPage - @pagedList.LastItemOnPage 件 / @pagedList.TotalItemCount 件中
                    </span>
                    @Html.PagedListPager((IPagedList)pagedList, pageNumber => Url.Action("Index", new {searchKeyWord = Model.SearchKeyWord, pageNumber = pageNumber }),
                new PagedListRenderOptions
                {
                UlElementClasses = new string [] {"pagination flex-wrap"},
                LiElementClasses = new string[] { "page-item" },
                PageClasses = new string[] { "page-link" },
                MaximumPageNumbersToDisplay = 10, //表示するページャーの数
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded, //「次へ」の非表示設定
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded, //「前へ」の非表示設定
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded, //「最初へ」の非表示設定
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded, //「最後へ」の表示設定
                })
                </div>
            }
        </div>

    </div>

</div>


@section Scripts {

    <script>
        const ROOT = '@Url.Content("~")';

        function SubmitForm(interruptReasonId, modalState) {
            let form = $(document).find('#interrupt-reason-form');
            let pageNumber = $('#PageNumber').val();
            let inputInterruptReasonId = $("<input>").attr("type", "hidden").attr("name", "ModalModel.InterruptReasonId").val(interruptReasonId);
            let inputModalStatus = $("<input>").attr("type", "hidden").attr("name", "ModalType").val(modalState);
            let input2 = $("<input>").attr("type", "hidden").attr("name", "pageNumber").val(pageNumber);
            $(form).append($(inputInterruptReasonId));
            $(form).append($(inputModalStatus));
            $(form).append($(input2));
            form.submit();
        }

        $(function () {
            if ('@((int)Model.ModalType)' > 0) {
                MicroModal.show('modal-interrupt-reason');
            }
        });

    </script>

}
