@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;

@model MSystemSettingViewModel
@{
    ViewData["Title"] = @Model.DisplayName;
    var pagedList = Model.SystemSettingModels;
}

<style>
    .modal__container {
        max-width: 800px !important; /* モーダルの幅を設定  */
        width: 800px !important; /* モーダルの幅を設定  */
    }
</style>

<div class="h4 mb-3">
    @{
        ViewData["Title"] = @Model.DisplayName;
    }
</div>
<div class="card shadow m-4">
    <div class="card-header">
        <h3 class="pt-2">@Model.DisplayName</h3>
    </div>
    <div class="card-body">
        <div class="p-2">
            <form id="system-setting-form" class="form-inline" asp-controller="MSystemSetting" enctype="multipart/form-data" method="get">
                <div class="row">
                    <div class="form-group col-auto">
                        <div class="input-group">
                            <input class="form-control form-control-lg" asp-for="SearchKeyWord" name="SearchKeyWord" type="text" placeholder="キーワードを入力" aria-describedby="btnNavbarSearch" />
                            <input type="hidden" asp-for="PageNumber" name="PageNumber" />
                            <button class="btn btn-search btn-lg" asp-action="Index" id="btnNavbarSearch" type="submit"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                </div>
            </form>
            <div class="col-auto my-2">
                <span class="text-success-custom">@ViewData["SuccessMessage"]</span>
                <span class="text-danger-custom">@ViewData["ErrorMessage"]</span>
            </div>

            <div style="overflow-x: scroll;">
                <table class="table sticky_table table-hover-evant mt-3">
                    <thead>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].SystemSettingId)</th>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].SystemSettingOutline)</th>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].SystemSettingDetail)</th>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].SystemSettingValue)</th>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].SystemSettingStringValue)</th>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].UpdateDateTime)</th>
                            <th>@Html.DisplayNameFor(model => model.SystemSettingModels[0].UpdateLoginInfor)</th>
                        </tr>
                    </thead>

                    @if (Model != null && pagedList != null && pagedList.Count > 0)
                    {
                        <tbody>
                            @foreach (var item in pagedList)
                            {
                                <tr onclick="SystemSettingEditView('@item.SystemSettingId')">
                                    <td class="text-right">
                                        @Html.DisplayFor(model => item.SystemSettingId)
                                        </td>
                                    <td class="text-left">
                                        @Html.DisplayFor(model => item.SystemSettingOutline)
                                    </td>
                                    <td class="text-left">
                                        @Html.DisplayFor(model => item.SystemSettingDetail)
                                        </td>
                                    <td class="text-left">
                                        @Html.DisplayFor(model => item.SystemSettingValue)
                                        </td>
                                    <td class="text-left">
                                        @Html.DisplayFor(model => item.SystemSettingStringValue)
                                        </td>
                                    <td class="text-center">
                                        @Html.DisplayFor(model => item.UpdateDateTime)
                                        </td>
                                    <td class="text-center">
                                        @Html.DisplayFor(model => item.UpdateLoginInfor)</td>
                                </tr>
                            }
                        </tbody>
                    }

                </table>
            </div>

            @if (pagedList != null)
            {
                <div class="mt-3">
                    <span class="page-no-label">
                        @pagedList.FirstItemOnPage - @pagedList.LastItemOnPage 件 / @pagedList.TotalItemCount 件中
                    </span>
                    @Html.PagedListPager((IPagedList)pagedList, pageNumber => Url.Action("Index", new {searchKeyWord = Model.SearchKeyWord, pageNumber = pageNumber }),
                new PagedListRenderOptions
                {
                LiElementClasses = new string[] { "page-item" },
                PageClasses = new string[] { "page-link" },
                MaximumPageNumbersToDisplay = 10, //表示するページャーの数
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded, //「次へ」の非表示設定
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded, //「前へ」の非表示設定
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded, //「最初へ」の非表示設定
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded, //「最後へ」の表示設定
                })
                </div>
            }
        </div>

    </div>

</div>

@if (Model.SystemSettingEditModel != null && Model.SystemSettingEditModel.SystemSettingId > 0)
{
    @await Html.PartialAsync("_Edit")
    @* @await Html.PartialAsync("~/Views/MSystemSetting/_Edit.cshtml") *@
}

@* @section Scripts { *@
<script>

    function SystemSettingEditView(systemSettingId) {
        var form = $(document).find('form');
        var input1 = $("<input>").attr("type", "hidden").attr("name", "editSystemSettingId").val(systemSettingId);
        $(form).append($(input1));
        form.submit();
    }

    function GetSystemSettingEditModel(systemSettingId) {

        event.preventDefault();
        if (!confirm('よろしいですか？')) {
            return false;
        }
        else {
            var formData = ('#system-setting-form').serialize();
            // var formData = new FormData(document.querySelector("#system-setting-form"));
                $.ajax({
                    async: false,
                    url: 'MSystemSetting/Edit',
                    type: 'GET',
                    data: { formData},
                    success: function (response) {
                    console.log(response);
                    // $("#MailForm").html(data);
                    }
                });
            }

        // $("#modal-1 .valid-area").fadeIn();
        // $("#modal-1").find(".valid-area span").text(res.mess);

        }

    function GetSystemSettingEditModel(systemSettingId) {
        event.preventDefault();
        var form = $('#system-setting-form').serialize();
        // var form = new FormData(document.querySelector("#system-setting-form"));
        var formData = form.serialize();
        var xhr = new XMLHttpRequest();
        xhr.open('GET', 'MSystemSetting/Edit', true);
        xhr.responseType = 'blob'; //blob型のレスポンスを受け付ける
        xhr.onload = function (e) {
            if (this.status == 200) {
                console.log(this.response);
                var blob = this.response;//レスポンス
                if (blob.type == "text/html") {

                    // Blobからデータを読み込み
                    const reader = new FileReader()
                    reader.onload = () => {
                        // 読み込みが完了したので結果を出力
                        //console.log(reader.result)

                        // view入れ替え
                        $("#index-page-area").html(reader.result);
                    }
                    reader.readAsText(blob)

                }
                else {

                }

            }
            else {
                if (this.status == 500) {
                    alert("サーバーエラー");
                    return;
                }
            }
        };

        xhr.onerror = function () {
            // 非 HTTP エラーの処理(e.g. ネットワークダウン)
            alert("エラー");
        };

        xhr.send(formData);
    }
    </script>
    @* } *@