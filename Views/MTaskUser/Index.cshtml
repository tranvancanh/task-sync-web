@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;

@model MTaskUserViewModel
@{
    ViewData["Title"] = @Model.DisplayName;
    var pagedList = Model.TaskUserModelModels;
}

<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>

<div class="h4 mb-3">
    @{
        ViewData["Title"] = @Model.DisplayName;
    }
</div>
<div class="card shadow m-4">
    <div class="card-header">
        <h3 class="pt-2">@Model.DisplayName</h3>
    </div>
    <div class="card-body">
        <div class="p-2">

            <form class="form-inline ms-1" id="m-import-form" asp-controller="MTaskUser" enctype="multipart/form-data" method="post">
                <div class="container-fluid px-0">
                    <div class="row">
                        <div class="col-xl-6">
                            <button class="btn btn-custom btn-lg" type="button" data-toggle="collapse" data-target="#collapseShow" aria-expanded="false" aria-controls="collapseShow" >
                                <span class="p-2"><i class="fas fa-chevron-down fa-fw"></i> 登録・修正</span>
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="collapse" id="collapseShow">
                            <div class="col-auto">
                                <div class="bd-callout">
                                    <p>
                                        出力したExcelファイルを編集して保存し、Excel取込をして登録・修正を行います。
                                    </p>
                                    <li>登録・・・新しい行を追加し、《登録修正フラグ》に半角数字の <b>1</b> を入力します。</li>
                                    <li>修正・・・値を変更し、《登録修正フラグ》に半角数字の <b>2</b> を入力します。作業者ログインIDをキーにして、対象行の値が上書きされます。</li>
                                    <div class="text-center m-3">
                                        <div class="form-inline py-3">
                                            <label id="file-label" class="btn btn-custom btn-selection my-1">
                                                <input style="display:none;" type="file" name="File"
                                                       accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
                                                <span class="p-2">ファイル選択</span>
                                            </label>
                                            <label class="file-name-view mx-2 my-1"></label>
                                        </div>
                                        <button class="btn btn-custom btn-lg ml-1" name="Action" value="ImportOutput" type="submit">
                                            <span class="p-2">
                                                <i class="fas fa-check fa-fw"></i> Excel取込
                                            </span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group text-left p-2 message-area">
                                @{
                                    var errorList = ViewData["Error"] as List<string>;
                                    if (errorList != null && errorList.Any())
                                    {
                                        <ul>
                                            @foreach(var mess in errorList)
                                            {
                                                <li class="text-danger-custom error-text">@mess</li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        var successMessage = ViewData["SuccessMessage"] as string;
                                        if (!string.IsNullOrWhiteSpace(successMessage))
                                        {
                                            <li class="text-success-custom msg-text">@successMessage</li>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </form>

            <form class="form-inline ms-1" asp-controller="MTaskUser" enctype="multipart/form-data" method="get">
                <div class="row">
                    <div class="form-group col-auto p-2">
                        <div class="input-group">
                            <input class="form-control form-control-lg" asp-for="SearchKeyWord" type="text" placeholder="キーワードを入力" aria-describedby="btnNavbarSearch" />
                            <button class="btn btn-search" name="Command" value="Search" id="btnNavbarSearch" type="submit"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                    <div class="form-group col-auto p-2">
                        <!--ExcelTest-->
                        <button class="btn btn-custom btn-lg" name="Command" value="ExcelOutput" type="submit">
                            <span class="p-2"><i class="fas fa-download fa-fw"></i> Excel出力</span>
                            </button>
                    </div>
                </div>
            </form>
            <div class="col-auto">
                <span class="text-danger-custom">@ViewData["ErrorMessage"] </span>
            </div>
            <div style="overflow-x: scroll;">
                <table class="table sticky_table table-hover-evant mt-3">
                    <thead>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].TaskUserLoginId)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].TaskUserName)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].TaskUserNameKana)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].TaskUserDepartmentName)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].TaskUserGroupName)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].Remark)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].IsNotUse)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].CreateDateTime)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].CreateFor)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].UpdateDateTime)</th>
                            <th>@Html.DisplayNameFor(model => model.TaskUserModelModels[0].UpdateFor)</th>
                        </tr>
                    </thead>

                    @if (Model != null && pagedList != null && pagedList.Count > 0)
                    {
                        <tbody>
                            @foreach (var item in pagedList)
                            {
                                <tr>
                                    <td class="">@Html.DisplayFor(model => item.TaskUserLoginId)</td>
                                    <td class="">@Html.DisplayFor(model => item.TaskUserName)</td>
                                    <td class="">@Html.DisplayFor(model => item.TaskUserNameKana)</td>
                                    <td class="">@Html.DisplayFor(model => item.TaskUserDepartmentName)</td>
                                    <td class="">@Html.DisplayFor(model => item.TaskUserGroupName)</td>
                                    <td class="">@Html.DisplayFor(model => item.Remark)</td>
                                    <td class="text-center">@((item.IsNotUse) ? 0 : 1)</td>
                                    <td class="">@Html.DisplayFor(model => item.CreateDateTime)</td>
                                    <td class="">@Html.DisplayFor(model => item.CreateFor)</td>
                                    <td class="">@Html.DisplayFor(model => item.UpdateDateTime)</td>
                                    <td class="">@Html.DisplayFor(model => item.UpdateFor)</td>
                                </tr>
                            }
                        </tbody>
                    }
                </table>
            </div>

            @if (pagedList != null)
            {
                <div class="mt-3">
                    <span class="page-no-label">
                        @pagedList.FirstItemOnPage-@pagedList.LastItemOnPage 件 / @(pagedList.TotalItemCount)件中
                    </span>
                    @Html.PagedListPager((IPagedList)pagedList, pageNumber => Url.Action("Index", new { searchKeyWord = Model.SearchKeyWord, pageNumber = pageNumber }),
                new PagedListRenderOptions
                {
                LiElementClasses = new string[] { "page-item" },
                PageClasses = new string[] { "page-link" },
                MaximumPageNumbersToDisplay = 10, //表示するページャーの数
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded, //「次へ」の非表示設定
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded, //「前へ」の非表示設定
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded, //「最初へ」の非表示設定
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded, //「最後へ」の表示設定
                })
                </div>
            }
        </div>

    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $(function () {

            // ページ開いたらファイル名セット
            FileNameSet($('#file-label input'));

            // ファイル選択input内容が変化したら、メッセージ削除＆ファイル名をセットする
            $('#file-label input').on('change', function () {
                FormDataCheck();
                let self = $(this);
                FileNameSet(self);
            });
        });

        const fileNameDefault = "ここに選択したファイル名が表示されます";

        function FileNameSet(self) {

            let files = self.prop('files');

            if (files.length > 0) {
                let file = files[0];
                let fileName = file.name;
                $('.file-name-view').text(fileName);
                $('.file-name-view').text(fileName);
            }
            else {
                $('.file-name-view').text(fileNameDefault);
            }
        }

        function FormClear() {
            $('.file-name-view').text(fileNameDefault);
            const form = document.querySelector("#m-import-form");
            form.reset();
        }

        function FormDataCheck() {

            $('.error-text').text("");
            $('.msg-text').text("");
            $('.message-area').html('');

            // FormData オブジェクトの利用
            const formData = new FormData(document.querySelector("#m-import-form"));

            let IsFirst = true;
            for (let file of formData) {

                if (IsFirst) {
                    if (file[1]["size"] <= 0) {
                        $('.error-text').text('@ErrorMessages.EW1203');
                        FormClear(formData);
                        return false;
                    }
                    else if (file[1]["name"].indexOf('.xlsx') <= 0) {
                        $('.error-text').text('@ErrorMessages.EW1202');
                        FormClear(formData);
                        return false;
                    }
                    else {
                        IsFirst = false;
                    }
                }
            }
            return true;
        }

        // function ChangeIconUpDow(element){
        //     let className = element.className;
        //     let position = className.search("collapsed");
        //     console.log(position);
        //     if (position > 0) {
        //         $('#iconUpDow').attr('class', 'fas fa-sort-down');
        //     }
        //     else {
        //         $('#iconUpDow').attr('class', 'fas fa-sort-down fa-rotate-180');
        //     }
        // }

        $(function () {
            if ('@((int)Model.IsState)' > 1) {
                $('#collapseShow').attr('class', 'collapse');
            }
            else{
                $('#collapseShow').attr('class', 'collapse show');
            }
        });

    </script>
}